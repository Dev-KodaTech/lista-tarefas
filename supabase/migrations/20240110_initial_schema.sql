-- Enable RLS (Row Level Security)
alter table auth.users enable row level security;

-- Create tables
create table public.categories (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    name text not null,
    color text not null,
    user_id uuid references auth.users(id) on delete cascade not null
);

create table public.todos (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    text text not null,
    completed boolean default false not null,
    date date,
    time time without time zone,
    category text not null,
    note text,
    repeat text check (repeat in ('daily', 'weekly', 'monthly')),
    user_id uuid references auth.users(id) on delete cascade not null
);

-- Enable RLS on tables
alter table public.categories enable row level security;
alter table public.todos enable row level security;

-- Create policies
create policy "Users can view their own categories"
    on public.categories for select
    using (auth.uid() = user_id);

create policy "Users can insert their own categories"
    on public.categories for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own categories"
    on public.categories for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Users can delete their own categories"
    on public.categories for delete
    using (auth.uid() = user_id);

create policy "Users can view their own todos"
    on public.todos for select
    using (auth.uid() = user_id);

create policy "Users can insert their own todos"
    on public.todos for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own todos"
    on public.todos for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Users can delete their own todos"
    on public.todos for delete
    using (auth.uid() = user_id);

-- Create indexes
create index categories_user_id_idx on public.categories(user_id);
create index todos_user_id_idx on public.todos(user_id);
create index todos_completed_idx on public.todos(completed);
create index todos_date_idx on public.todos(date);

-- Create function to update updated_at
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql security definer;

-- Create trigger for updated_at
create trigger handle_todos_updated_at
    before update on public.todos
    for each row
    execute procedure public.handle_updated_at(); 